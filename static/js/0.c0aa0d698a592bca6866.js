webpackJsonp([0],{"8hXn":function(n,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var t={render:function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"header"},[e("el-avatar",{attrs:{size:60,src:"@/assets/images/0.jpg"}})],1)},staticRenderFns:[]};var a={name:"HelloWorld",data:function(){return{msg:"Welcome to Your Vue.js App"}},components:{HeaderNav:s("C7Lr")({name:"header",data:function(){return{}}},t,!1,function(n){s("taD3")},"data-v-199a0299",null).exports}},i={render:function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("el-container",[t("el-header",[t("h2",[n._v("文章1：优化Vue项目的打包速度")])]),n._v(" "),t("el-container",{staticClass:"content-wrapper"},[t("el-aside",{attrs:{width:"300px"}},[t("el-avatar",{attrs:{size:100,src:""}},[t("img",{attrs:{src:s("aUzH"),alt:""}})]),n._v(" "),t("h3",[n._v("My Blog")]),n._v(" "),t("h4",[n._v("It's easy to say")]),n._v(" "),t("h4",[n._v("but not easy to Code")])],1),n._v(" "),t("el-main",[t("h3",[n._v("优化Vue项目的打包速度")]),n._v(" "),t("p",[n._v("\n          随着项目依赖的增加, 在配合开发的时候听到后端同学的抱怨 build 时间长, 及其影响开发效率和心情. 然后翻阅了相关的资料开启Vue优化之路。\n          此项目是针对vue-cli2脚手架进行优化的\n        ")]),n._v(" "),t("br"),n._v(" "),t("p",[n._v("\n          项目依赖管理\n          首先检查一下依赖, 去掉对项目没用的依赖, 然后注意开发依赖跟生产依赖不能弄混. 如scss, scss-loader要放在开发依赖中, 因为编译后就不需要了。\n        ")]),n._v(" "),t("strong",[n._v("优化配置")]),n._v("\n        **修改config/index.js下的文件**\n        "),t("pre",[n._v("      // 开发环境dev下, 设置为`eval`能提高最快速度, 但是缺点是不能正确显示行号, Debug会有点影响\n      devtool: 'eval'\n      // 关闭生产环境的sourceMap, 不懂是啥的话可以看下面的文章\n      // 阮一峰 - JavaScript Source Map 详解(http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html)\n\n      productionSourceMap: false\n")]),n._v(" "),t("strong",[n._v("在src/mian.js关闭生产环境下的调试信息")]),n._v(" "),t("pre",[n._v('const isDebugMode = process.env.NODE_ENV !== "production";\nVue.config.debug = isDebugMode;\nVue.config.devtools = isDebugMode;\nVue.config.productionTip = isDebugMode;\n')]),n._v(" "),t("strong",[n._v("启动 DllPlugin")]),n._v(" "),t("p",[n._v("在build文件夹中新增webpac.dll.config.js的js文件. 我们将第三方库抽取出来, 打包dll代码.")]),n._v(" "),t("pre",[n._v('const path = require("path");\nconst webpack = require("webpack");\n// 抽取第三方库\nconst vendors = [\n      "vue/dist/vue.common.js",\n      "vue-router",\n      "babel-polyfill",\n      "axios",\n      "element-ui",\n      "mint-ui"\n]\nmodule.exports = {\n  entry: {\n    vendor: vendors\n  },\n  output: {\n    path: path.join(__dirname, "../static/js"),\n    filename: "[name].dll.js",\n    library: "[name]_[hash]" // vendor.dll.js中暴露出的全局变量名\n  },\n  plugins: [\n    new webpack.DllPlugin({\n    path: path.join(__dirname, ".", "[name]-manifest.json"),\n      // 此处需要和 output.library 的值一致\n      name: "[name]_[hash]",\n      context: __dirname\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      }\n    })\n  ]\n};\n')]),n._v(" "),t("p",[n._v("然后再写一个快捷的调用方式, 在package.json的script上添加一行代码:")]),n._v(" "),t("pre",[n._v('{\n  "scripts": {\n    ...此处省略其他代码\n    "dll": "webpack --config ./build/webpack.dll.config.js"\n  }\n}\n')]),n._v(" "),t("p",[n._v("\n          然后直接在命令行使用 **npm run dll**, 生成**vendor-manifest.json**和**vendor.dll.js**, 前者是库文件的node_modle路径和webpack打包id的映射. 后者是打包后的代码库。\n          + 然后再安装**html-webpack-include-assets-plugin**和**copy-webpack-plugin**这两个插件.\n        ")]),n._v(" "),t("pre",[n._v("npm install --save-dev html-webpack-include-assets-plugin copy-webpack-plugin\n")]),n._v(" "),t("p",[n._v("copy-webpack-plugin是因为项目的需要，需要copy到指定的目录下.")]),n._v(" "),t("p",[n._v("html-webpack-include-assets-plugin是将vendor.dll.js插入到index.html里.")]),n._v(" "),t("p",[n._v("\n          这里值得一提的是, 虽然我们可以直接在根目录的index.html里插入script, 但实际上并不妥当的. 当你npm run dev后, 你会发现在控制台那一行红色的报错, 告诉着你东西找不到, 虽然不影响开发, 但你会看得很难受.\n          紧接着在webpack.prod.conf.js上引用我们添加的依赖, 再添加以下代码\n        ")]),n._v(" "),t("pre",[n._v("// config 是 config/index.js 里的配置\n// utils.assetsPath 也是 build/utils.js的配置\n// 这里这样写是为了跟项目统一\nplugins: [\n  new webpack.DllReferencePlugin({\n    context: __dirname,\n    manifest: require('./vendor-manifest.json')\n  }),\n  // copy custom static assets\n  new CopyWebpackPlugin([\n    {\n      from: path.resolve(__dirname, '../static'),\n      to: config.build.assetsSubDirectory,\n      ignore: ['.*']\n    }\n  ]),\n  // 将 vendor.dll.js 插入HTML里\n  new HtmlWebpackIncludeAssetsPlugin({\n    assets: [utils.assetsPath('js/vendor.dll.js')],\n    files: ['index.html'],\n    append: false\n  }),\n]\n")]),n._v(" "),t("p",[n._v("\n          在命令行进行打包npm run build, 可以看到构建的速度大大的提高啦.\n          "),t("br"),n._v("根据我的实测，由原来的3分钟到1分钟，确实节省了很多的时间。\n        ")]),n._v(" "),t("p",[n._v("最后再优化时说说踩的坑, 给后来人一些提示.")]),n._v(" "),t("p",[n._v("\n          Uncaught ReferenceError: vendor_library is not defined - 检查HTML里是否插入vendor.dll.js, 文件是否加载成功, 或者检查是否有路径问题.\n          一些打包后hash不变仍然会被清除重新打包 … 这是因为vue-cli默认配置会直接清空dist文件夹里的所有文件, 你提前放一些js文件进去也是没有用的.\n        ")])])],1),n._v(" "),t("el-footer",[n._v("\n      2018-2020  angrybird233 \n      "),t("strong",[n._v("©")]),n._v(" copyright\n    ")])],1)},staticRenderFns:[]};var r=s("C7Lr")(a,i,!1,function(n){s("kdQ5")},"data-v-84a2a4fe",null);e.default=r.exports},aUzH:function(n,e,s){n.exports=s.p+"static/img/0.21b0e25.jpg"},kdQ5:function(n,e){},taD3:function(n,e){}});